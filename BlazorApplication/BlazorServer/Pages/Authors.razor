@page "/"
@inject IAuthorService authorService
@inject IJSRuntime JSRuntime

<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />
    <div id="divServerValidations" class="col-10 alert alert-info" >

    </div>
    <EditForm Model="@author" OnValidSubmit="@SaveAuthor">
        <DataAnnotationsValidator/>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">First name :</label>
            @*<InputText @ref="firstNameText" class="form-control col-3" @bind-Value="author.FirstName" placeholder="first name" />*@
            <input @ref="firstNameText" class="form-control col-3" @bind="author.FirstName" placeholder="first name" />

            &nbsp;<ValidationMessage For="@(()=>author.FirstName)" />
        </div>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Last name :</label>
            <InputText class="form-control col-3" @bind-Value="author.LastName" placeholder="last name" />
            &nbsp;<ValidationMessage For="@(()=>author.LastName)" />
        </div>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">City :</label>
            @*<InputText class="form-control col-3" @bind-Value="author.City" placeholder="city" />*@
            <InputSelect @bind-Value="author.City" class="form-control col-3">
                @if (Cities!=null)
                {
                    @foreach (var city in Cities)
                    {
                        <option value="@city">@city</option>
                    }
                }
            </InputSelect>
            &nbsp;<ValidationMessage For="@(()=>author.City)" />
        </div>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Email address :</label>
            <InputText class="form-control col-3" @bind-Value="author.EmailAddress" placeholder="email address" />
            &nbsp;<ValidationMessage For="@(()=>author.EmailAddress)" />
        </div>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Salary :</label>
            <InputNumber class="form-control col-3" @bind-Value="author.Salary" />
            &nbsp;<ValidationMessage For="@(()=>author.Salary)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>
    </EditForm>
</div>

<br />

<div class="col-10">

    <h3><b>Authors</b></h3>

    <table class="table">
        <thead>
            <tr>
                <th>AuthorId</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>City</th>
                <th>Email Address</th>
                <th>Salary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Author author in AuthorList)
            {
            <tr>
                <td>
                    <NavLink href=@string.Format("/authors/authordetail/{0}", author.AuthorId)>
                        @author.AuthorId
                    </NavLink>
                </td>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>@author.City</td>
                <td>@author.EmailAddress</td>
                <td>$@author.Salary</td>
            </tr>
            }
        </tbody>
    </table>

</div>

<hr/>
<div class="col-12 row" >@authorService.GetCreateDate()</div>
<div class="col-12 row">@authorService.GetVersion()</div>

@code {
    public Author author { get; set; }
    public List<Author> AuthorList { get; set; }
    ElementReference firstNameText;
    public string[] Cities { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Cities==null)
        {
            Cities=  await JSRuntime.InvokeAsync<string[]>("getCities");
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        AuthorList = authorService.GetAuthors();
        author = new Author();
    }

    private async Task SaveAuthor()
    {
        authorService.SaveAuthor(author);
        var firstName = author.FirstName;
        var lastName = author.LastName;
        author = new Author();
        await JSRuntime.InvokeVoidAsync("saveMessage",firstName,lastName);
        await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstNameText);
    }
}
